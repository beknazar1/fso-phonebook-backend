{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Filter.js","components/Persons.js","components/Notification.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","delete","updatedPerson","put","PersonForm","persons","setPersons","setNotification","setErrorMessage","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","personsFiltered","filter","person","name","number","length","window","confirm","idToBeUpdated","personService","map","setTimeout","catch","error","returnedPerson","concat","value","onChange","target","type","Filter","setFilter","Persons","filtered","toLowerCase","includes","key","onClick","p","Notification","notification","errorMessage","className","App","useEffect","initialPersons","ReactDOM","render","document","getElementById"],"mappings":"+OACMA,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVD,SAAAG,GAEZ,OADgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IAC5BL,MAAK,kBAAMK,MAQb,EALA,SAACA,EAAIE,GAElB,OADgBT,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAME,GAC/BP,MAAK,SAACC,GAAD,OAAcA,EAASC,SC6C9BO,EA9DI,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,gBAAsB,EAClDC,mBAAS,IADyC,mBACzEC,EADyE,KAChEC,EADgE,OAE9CF,mBAAS,IAFqC,mBAEzEG,EAFyE,KAE9DC,EAF8D,KAqDhF,OACE,0BAAMC,SAlDU,SAACC,GACjBA,EAAMC,iBACN,IAAMC,EAAkBZ,EAAQa,QAAO,SAAAC,GAAM,OAAIA,EAAOC,OAASV,KAC3DZ,EAAY,CAACsB,KAAMV,EAASW,OAAQT,GAE1C,GAAIK,EAAgBK,OAAS,GAE3B,GAAGC,OAAOC,QAAP,UAAkBd,EAAlB,yEAAkG,CACnG,IAAMe,EAAgBR,EAAgB,GAAGjB,GACzC0B,EACUD,EAAe3B,GACtBH,MAAK,SAAAO,GACJI,EAAWD,EAAQsB,KAAI,SAAAR,GAAM,OAAIA,EAAOnB,KAAOyB,EAAgBN,EAASjB,MACxEK,EAAgB,WAAD,OAAYL,EAAckB,KAA1B,iBACfQ,YAAW,kBAAMrB,EAAgB,QAAO,KACxCI,EAAW,IACXE,EAAa,OAEdgB,OAAM,SAAAC,GACLtB,EAAgB,kBAAD,OAAmBE,EAAnB,0CACfkB,YAAW,kBAAMpB,EAAgB,QAAO,KACxCF,EAAWD,EAAQa,QAAO,SAAAC,GAAM,OAAIA,EAAOnB,KAAOyB,MAClDd,EAAW,IACXE,EAAa,aAMnBa,EACU5B,GACPH,MAAM,SAAAoC,GACLzB,EAAWD,EAAQ2B,OAAOD,IAC1BxB,EAAgB,SAAD,OAAUwB,EAAeX,KAAzB,iBACfQ,YAAW,kBAAMrB,EAAgB,QAAO,KACxCI,EAAW,IACXE,EAAa,SAejB,sCAAW,2BAAOoB,MAAOvB,EAASwB,SAVb,SAACnB,GACxBJ,EAAWI,EAAMoB,OAAOF,WAUtB,wCAAa,2BAAOA,MAAOrB,EAAWsB,SAPf,SAACnB,GAC1BF,EAAaE,EAAMoB,OAAOF,WAOxB,6BAAK,4BAAQG,KAAK,UAAb,UC9CIC,EAZA,SAAC,GAAyB,IAAxBnB,EAAuB,EAAvBA,OAAQoB,EAAe,EAAfA,UAKvB,OACE,8BACE,kDAAuB,2BAAOL,MAAOf,EAAQgB,SANtB,SAACnB,GAC1BuB,EAAUvB,EAAMoB,OAAOF,aCmBZM,EApBC,SAAC,GAAqD,IAApDlC,EAAmD,EAAnDA,QAAUa,EAAyC,EAAzCA,OAAQZ,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,gBACxCiC,EAAWnC,EAAQa,QAAO,SAAAC,GAAM,OAAIA,EAAOC,KAAKqB,cAAcC,SAASxB,EAAOuB,kBAcpF,OAAQD,EAASb,KAAI,SAAAR,GAAM,OACzB,yBAAKwB,IAAKxB,EAAOnB,IAAKmB,EAAOC,KAA7B,IAAoCD,EAAOE,OAAO,4BAAQuB,QAAS,kBAb/C5C,EAakEmB,EAAOnB,GAbrEoB,EAayED,EAAOC,UAZrGG,OAAOC,QAAP,iBAAyBJ,EAAzB,OACDM,EACS1B,GACNL,MAAK,SAAAK,GACJM,EAAWD,EAAQa,QAAO,SAAA2B,GAAC,OAAIA,EAAE7C,KAAOA,MACxCO,EAAgB,WAAD,OAAYa,EAAZ,iBACfQ,YAAW,kBAAMrB,EAAgB,QAAO,SAP3B,IAACP,EAAIoB,IAa0B,eCCvC0B,EAlBM,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACnC,OAAqB,OAAjBD,GAA0C,OAAjBC,EACpB,KAGLD,EAEA,yBAAKE,UAAU,gBAAgBF,GAI/BC,EAEA,yBAAKC,UAAU,SAASD,QAF5B,GCyBaE,EA/BH,WAAO,IAAD,EACezC,mBAAS,IADxB,mBACRJ,EADQ,KACCC,EADD,OAEcG,mBAAS,IAFvB,mBAERS,EAFQ,KAEAoB,EAFA,OAG0B7B,mBAAS,MAHnC,mBAGRsC,EAHQ,KAGMxC,EAHN,OAI0BE,mBAAS,MAJnC,mBAIRuC,EAJQ,KAIMxC,EAJN,KAkBhB,OAFA2C,qBAVa,WACXzB,IAEG/B,MAAK,SAAAyD,GACJ9C,EAAW8C,GACX7C,EAAgB,iCAChBqB,YAAW,kBAAMrB,EAAgB,QAAO,UAI9B,IAGd,6BACE,yCACA,kBAAC,EAAiB,CAACwC,eAAcC,iBACjC,kBAAC,EAAD,CAAQ9B,OAAQA,EAAQoB,UAAWA,IACnC,gDACA,kBAAC,EAAe,CAACjC,UAASC,aAAYC,kBAAiBC,oBACvD,uCACA,kBAAC,EAAY,CAACH,UAASC,aAAYY,SAAQX,sBC5BjD8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f14ecf27.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newPerson => {\n  const request = axios.post(baseUrl, newPerson)\n  return request.then(response => response.data)\n}\n\nconst erase = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(() => id)\n}\n\nconst update = (id, updatedPerson) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedPerson)\n  return request.then((response) => response.data)\n}\n\nexport default { getAll, create, erase, update }","import React, { useState } from 'react'\nimport personService from '../services/persons'\n\nconst PersonForm = ({ persons, setPersons, setNotification, setErrorMessage }) => {\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  \n  const addPerson = (event) => {\n    event.preventDefault()\n    const personsFiltered = persons.filter(person => person.name === newName)\n    const newPerson = {name: newName, number: newNumber}\n    \n    if (personsFiltered.length > 0) {\n      \n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with new one?`)) {\n        const idToBeUpdated = personsFiltered[0].id;\n        personService\n          .update(idToBeUpdated, newPerson)\n          .then(updatedPerson => {\n            setPersons(persons.map(person => person.id !== idToBeUpdated ? person : updatedPerson))\n            setNotification(`Updated ${updatedPerson.name} succesfully`)\n            setTimeout(() => setNotification(null), 3000)\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${newName} has already been deleted from server`)\n            setTimeout(() => setErrorMessage(null), 3000)\n            setPersons(persons.filter(person => person.id !== idToBeUpdated))\n            setNewName('')\n            setNewNumber('')\n          })\n      \n       }\n\n    } else {\n      personService\n        .create(newPerson)\n        .then (returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotification(`Added ${returnedPerson.name} succesfully`)\n          setTimeout(() => setNotification(null), 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    }\n  }\n  \n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  \n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  return (\n    <form onSubmit={addPerson}>\n      <div>name: <input value={newName} onChange={handleNameChange} /></div>\n      <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({filter, setFilter}) => {\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n  \n  return (\n    <form >\n      <div>filter shown with <input value={filter} onChange={handleFilterChange} /></div>\n    </form>\n  )\n}\n\nexport default Filter","import React from 'react'\nimport personService from '../services/persons'\n\nconst Persons = ({persons,  filter, setPersons, setNotification}) => {\n  const filtered = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n  \n  const handleDelete = (id, name) => {\n    if(window.confirm(`Delete ${name}?`)) {\n      personService\n        .erase(id)\n        .then(id => {\n          setPersons(persons.filter(p => p.id !== id))\n          setNotification(`Deleted ${name} succesfully`)\n          setTimeout(() => setNotification(null), 3000)\n        })\n    }\n  }\n  \n  return (filtered.map(person =>\n    <div key={person.id}>{person.name} {person.number}<button onClick={() => handleDelete(person.id, person.name)}>Delete</button></div>\n  ))\n}\n\nexport default Persons","import React from 'react'\n\nconst Notification = ({notification, errorMessage}) => {\n  if (notification === null && errorMessage === null) {\n    return null\n  }\n  \n  if (notification) {\n    return (\n      <div className=\"notification\">{notification}</div>\n    )\n  }\n  \n  if (errorMessage) {\n    return (\n      <div className=\"error\">{errorMessage}</div>\n    )\n  }\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from '../services/persons'\nimport PersonForm from './PersonForm'\nimport Filter from './Filter'\nimport Persons from './Persons'\nimport Notification from './Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  const hook = () => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        setNotification('Content retrieved succesfully')\n        setTimeout(() => setNotification(null), 3000)\n      })\n  }\n\n  useEffect(hook, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification {...{notification, errorMessage}} />\n      <Filter filter={filter} setFilter={setFilter}/>\n      <h2>add a new person</h2>\n      <PersonForm {...{persons, setPersons, setNotification, setErrorMessage}}/>\n      <h2>Numbers</h2>\n      <Persons {...{persons, setPersons, filter, setNotification}}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}